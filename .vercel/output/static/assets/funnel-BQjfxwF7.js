import{al as I,r as x,am as q,an as L,ao as M,ap as b,h}from"./index-BhShMgCK.js";const E=(t,i,n)=>s=>{const o={...s.queries},c=s.nextPageKey,r=s.nextPageKey+1,g=s.nextPageKey+2;o[c]={query:s.query,args:{...s.args,paginationOpts:{...s.queries[t].args.paginationOpts,endCursor:i}}},o[r]={query:s.query,args:{...s.args,paginationOpts:{...s.queries[t].args.paginationOpts,cursor:i,endCursor:n}}};const l={...s.ongoingSplits};return l[t]=[c,r],{...s,nextPageKey:g,queries:o,ongoingSplits:l}},R=t=>i=>{const n=i.ongoingSplits[t];if(n===void 0)return i;const s={...i.queries};delete s[t];const o={...i.ongoingSplits};delete o[t];let c=i.pageKeys.slice();const r=i.pageKeys.findIndex(g=>g===t);return r>=0&&(c=[...i.pageKeys.slice(0,r),...n,...i.pageKeys.slice(r+1)]),{...i,queries:s,pageKeys:c,ongoingSplits:o}};function F(t,i,n){if(typeof(n==null?void 0:n.initialNumItems)!="number"||n.initialNumItems<0)throw new Error(`\`options.initialNumItems\` must be a positive number. Received \`${n==null?void 0:n.initialNumItems}\`.`);const s=i==="skip",o=s?{}:i,c=I(t),r=x.useMemo(()=>()=>{const e=Q();return{query:t,args:o,id:e,nextPageKey:1,pageKeys:s?[]:[0],queries:s?{}:{0:{query:t,args:{...o,paginationOpts:{numItems:n.initialNumItems,cursor:null,id:e}}}},ongoingSplits:{},skip:s}},[JSON.stringify(q(o)),c,n.initialNumItems,s]),[g,l]=x.useState(r);let u=g;(I(t)!==I(g.query)||JSON.stringify(q(o))!==JSON.stringify(q(g.args))||s!==g.skip)&&(u=r(),l(u));const P=L().logger,p=M(u.queries),[N,K]=x.useMemo(()=>{var d,a;let e;const m=[];for(const y of u.pageKeys){if(e=p[y],e===void 0)break;if(e instanceof Error){if(e.message.includes("InvalidCursor")||e instanceof b&&typeof e.data=="object"&&((d=e.data)==null?void 0:d.isConvexSystemError)===!0&&((a=e.data)==null?void 0:a.paginationError)==="InvalidCursor")return P.warn("usePaginatedQuery hit error, resetting pagination state: "+e.message),l(r),[[],void 0];throw e}const f=u.ongoingSplits[y];if(f!==void 0?p[f[0]]!==void 0&&p[f[1]]!==void 0&&l(R(y)):e.splitCursor&&(e.pageStatus==="SplitRecommended"||e.pageStatus==="SplitRequired"||e.page.length>n.initialNumItems*2)&&l(E(y,e.splitCursor,e.continueCursor)),e.pageStatus==="SplitRequired")return[m,void 0];m.push(...e.page)}return[m,e]},[p,u.pageKeys,u.ongoingSplits,n.initialNumItems,r,P]),O=x.useMemo(()=>{if(K===void 0)return u.nextPageKey===1?{status:"LoadingFirstPage",isLoading:!0,loadMore:d=>{}}:{status:"LoadingMore",isLoading:!0,loadMore:d=>{}};if(K.isDone)return{status:"Exhausted",isLoading:!1,loadMore:d=>{}};const e=K.continueCursor;let m=!1;return{status:"CanLoadMore",isLoading:!1,loadMore:d=>{m||(m=!0,l(a=>{const y=[...a.pageKeys,a.nextPageKey],f={...a.queries};return f[a.nextPageKey]={query:a.query,args:{...a.args,paginationOpts:{numItems:d,cursor:e,id:a.id}}},{...a,nextPageKey:a.nextPageKey+1,pageKeys:y,queries:f}}))}}},[K,u.nextPageKey]);return{results:N,...O}}let C=0;function Q(){return C++,C}/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const _=[["path",{d:"M10 20a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341L21.74 4.67A1 1 0 0 0 21 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14z",key:"sc7q7i"}]],J=h("funnel",_);export{J as F,F as u};
